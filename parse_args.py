import argparse

def parse_args():

    parser = argparse.ArgumentParser()
    parser.add_argument('--fragment_sdf', '-f', type = str, default = None,
                        help = 'Location of fragment SDF. Can be an SDF file of a larger ligand for which the fragment is a substructure')
    parser.add_argument('--fragment_smiles', '-s', type = str, default = None,
                        help = 'Location of file containing fragment smiles string. The exit vector should be denoted by a dummy atom. Either you must specify an exit_vector_index or provide a fragment_smiles.')
    parser.add_argument('--exit_vector_idx', '-v', type = int, default = None,
                        help = 'The atomic index of the atom you wish to use as an exit vector. Either you must specify an exit_vector_index or provide a fragment_smiles. If you provide an exit_vector_index, then STRIFE can only use the molecule provided in fragment_sdf to make elaborations, whereas you can use fragment_smiles to make elaborations to substructures of the molecule provided in fragment_sdf.'  )


    parser.add_argument('--protein', '-p', type = str, default = None,
                        help = 'Location of protein pdb file (should have already been protonated)')
    parser.add_argument('--output_directory', '-o', type = str, default = '.',
                        help = 'Directory to store output (default = current directory)')


    parser.add_argument('--hotspots_output', '-z', type = str, default = None,
                        help = 'Location of zip file containing hotspots output, if already calculated')
    parser.add_argument('--calculate_hotspots', '-c', type = str, default = None,
                        help = 'Location to save a FHM - if not None, then STRIFE will calculate an FHM, store it in the specified location and use it to generate molecules')
    parser.add_argument('--load_specified_pharms', '-m', action = "store_true",
                        help = 'Use pharmacophores that have been manually specfied instead of ones derived from FHMs. If True, the output_directory should contain at least one of donorHotspot.sdf or acceptorHotspot.sdf')
    parser.add_argument('--path_length_model', type = str, default = 'models/pathLengthPred_saved.pickle',
                        help = 'Location of saved SVM for predicting path distances')

    parser.add_argument('--model_type', '-t', type = int, default = 0,
                        help = 'Specify which setting you wish to generate the molecules with: 0 -> default STRIFE algorithm, 1 -> simultaneously satisfy multiple pharmacophoric points (only recommended if you have manually specified the pharmacophores), 2 -> run the STRIFE algorithm without refinement. Default %(default)s')
    parser.add_argument('--number_elaborations', '-n', type = int, default = 250,
            help = 'Final number of elaborations for the model to generate. Default: %(default)s')
    parser.add_argument('--number_elaborations_exploration', '-e', type = int, default = 250,
            help = 'Number of elaborations to make per pharmacophoric point in the exploration phase. Default: %(default)s')
    parser.add_argument('--name', type = str, default = None,
                        help = 'Model name for saving the model. If None (the default argument) then the model will be saved as STRIFE_{date and time}.pickle')
    parser.add_argument('--write_elaborations_dataset', '-w', action = "store_true",
            help='Save the DataFrame containing the final elaborations generated by STRIFE as rankedElaborationsFinal.csv')

    parser.add_argument('--num_cpu_cores', '-cpu', type = int, default = 1,
            help='Number of CPU cores to use for docking and other computations. Specifiying -1 will use all available cores')

    return parser.parse_args()
